notes

#from rocketneck's slack post

def two_in_a_row(board, t = self.token)
    m = false
    m = 3 if board[0] == t && board[1] == t && board[2] == " "
    m = 6 if board[3] == t && board[4] == t && board[5] == " "
    m = 9 if board[6] == t && board[7] == t && board[8] == " "
    m = 1 if board[1] == t && board[2] == t && board[0] == " "
    m = 4 if board[4] == t && board[5] == t && board[3] == " "
    m = 7 if board[7] == t && board[8] == t && board[6] == " "
    m = 7 if board[0] == t && board[3] == t && board[6] == " "
    m = 8 if board[1] == t && board[4] == t && board[7] == " "
    m = 9 if board[2] == t && board[5] == t && board[8] == " "
    m = 1 if board[6] == t && board[3] == t && board[0] == " "
    m = 2 if board[4] == t && board[7] == t && board[1] == " "
    m = 3 if board[8] == t && board[5] == t && board[2] == " "
    m = 3 if board[6] == t && board[4] == t && board[2] == " "
    m = 7 if board[4] == t && board[2] == t && board[6] == " "
    m = 1 if board[0] == t && board[4] == t && board[8] == " "
    m = 9 if board[4] == t && board[0] == t && board[8] == " "
    m
  end

  def update(input, player)
    cells[input.to_i-1] = player.token
  end
...
class Player
  attr_reader :token

  def initialize(token)
    @token = token
  end
end

# input = ""
# #require 'pry'; binding.pry
# while input != "exit"
#   case input
#   when "0"
#     Game.new(player_1 = Player::Computer.new("X"), player_2 = Player::Computer.new("O"))
#   when "1"
#     puts "Who goes first, you or the computer?"
#     first_player = gets.strip
#     if first_player == "me"
#       Game.new(player_2 = Player::Computer.new("O"))
#     elsif first == "computer"
#       Game.new(player_1 = Player::Computer.new("X"))
#     end
#   when "2"
#     Game.new
#   end
# end
